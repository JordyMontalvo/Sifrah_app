// Script de debug para el problema de redirecci√≥n autom√°tica
// Ejecutar en la consola del navegador despu√©s de hacer login

console.log('=== DEBUG DE REDIRECCI√ìN AUTOM√ÅTICA ===');

// Funci√≥n para mostrar el estado completo
function mostrarEstadoCompleto() {
  console.log('\n--- ESTADO COMPLETO DEL SISTEMA ---');
  
  console.log('\nüìä Store State:');
  console.log('  session:', store.state.session);
  console.log('  affiliated:', store.state.affiliated, `(${typeof store.state.affiliated})`);
  console.log('  office_id:', store.state.office_id);
  
  console.log('\nüíæ LocalStorage:');
  console.log('  session:', localStorage.getItem('session'));
  console.log('  affiliated:', localStorage.getItem('affiliated'), `(${typeof localStorage.getItem('affiliated')})`);
  console.log('  office_id:', localStorage.getItem('office_id'));
  
  console.log('\nüõ£Ô∏è  Router:');
  console.log('  Ruta actual:', router.currentRoute.path);
  console.log('  Ruta anterior:', router.currentRoute.name || 'N/A');
  
  console.log('\nüîç An√°lisis:');
  const session = store.state.session || localStorage.getItem('session');
  const affiliated = store.state.affiliated !== null && store.state.affiliated !== undefined 
    ? store.state.affiliated 
    : (localStorage.getItem('affiliated') === 'true');
  
  console.log('  ¬øHay sesi√≥n?', !!session);
  console.log('  ¬øEst√° afiliado?', affiliated);
  console.log('  ¬øDeber√≠a redirigir?', session && affiliated ? 'A /dashboard' : session ? 'A /affiliation' : 'A /login');
}

// Funci√≥n para forzar sincronizaci√≥n
function forzarSincronizacion() {
  console.log('\n--- FORZANDO SINCRONIZACI√ìN ---');
  
  const localAffiliated = localStorage.getItem('affiliated');
  if (localAffiliated !== null) {
    const affiliatedValue = localAffiliated === 'true';
    store.commit('SET_AFFILIATED', affiliatedValue);
    console.log('‚úÖ Estado de afiliaci√≥n sincronizado:', affiliatedValue);
  } else {
    console.log('‚ö†Ô∏è  No hay estado de afiliaci√≥n en localStorage');
  }
  
  mostrarEstadoCompleto();
}

// Funci√≥n para simular cambio de afiliaci√≥n
function cambiarAfiliacion(esAfiliado) {
  console.log(`\n--- CAMBIANDO AFILIACI√ìN A: ${esAfiliado} ---`);
  
  store.commit('SET_AFFILIATED', esAfiliado);
  
  console.log('‚úÖ Estado cambiado, verificando...');
  setTimeout(() => {
    mostrarEstadoCompleto();
  }, 100);
}

// Funci√≥n para limpiar y reiniciar
function limpiarYReiniciar() {
  console.log('\n--- LIMPIANDO Y REINICIANDO ---');
  
  store.dispatch('clearState');
  localStorage.clear();
  
  console.log('‚úÖ Estado limpiado');
  mostrarEstadoCompleto();
}

// Funci√≥n para verificar logs del router
function verificarLogsRouter() {
  console.log('\n--- VERIFICANDO LOGS DEL ROUTER ---');
  console.log('Revisa la consola para ver los logs del Router Guard');
  console.log('Deber√≠as ver algo como: "Router Guard: { to: "/affiliation", ... }"');
}

// Funci√≥n para verificar logs del AppInitializer
function verificarLogsAppInitializer() {
  console.log('\n--- VERIFICANDO LOGS DEL APP INITIALIZER ---');
  console.log('Revisa la consola para ver los logs del AppInitializer');
  console.log('Deber√≠as ver algo como: "AppInitializer: Estado de afiliaci√≥n: ..."');
}

// Funci√≥n para navegar y ver qu√© pasa
function navegarYVerificar(ruta) {
  console.log(`\n--- NAVEGANDO A: ${ruta} ---`);
  
  router.push(ruta);
  
  setTimeout(() => {
    console.log('‚úÖ Navegaci√≥n completada');
    mostrarEstadoCompleto();
  }, 200);
}

// Funci√≥n para mostrar ayuda
function mostrarAyuda() {
  console.log('\n=== FUNCIONES DISPONIBLES ===');
  console.log('mostrarEstadoCompleto() - Mostrar estado completo del sistema');
  console.log('forzarSincronizacion() - Forzar sincronizaci√≥n del estado');
  console.log('cambiarAfiliacion(boolean) - Cambiar estado de afiliaci√≥n');
  console.log('limpiarYReiniciar() - Limpiar todo el estado');
  console.log('verificarLogsRouter() - Verificar logs del router');
  console.log('verificarLogsAppInitializer() - Verificar logs del AppInitializer');
  console.log('navegarYVerificar(ruta) - Navegar y verificar estado');
  console.log('mostrarAyuda() - Mostrar esta ayuda');
  
  console.log('\n=== EJEMPLOS DE USO ===');
  console.log('mostrarEstadoCompleto()           // Ver estado actual');
  console.log('forzarSincronizacion()           // Sincronizar estado');
  console.log('cambiarAfiliacion(true)          // Hacer afiliado');
  console.log('cambiarAfiliacion(false)         // Quitar afiliaci√≥n');
  console.log('navegarYVerificar("/dashboard")  // Ir a dashboard y verificar');
}

// Ejecutar verificaci√≥n inicial
console.log('Ejecutando verificaci√≥n inicial...');
mostrarEstadoCompleto();

// Mostrar ayuda
mostrarAyuda();

console.log('\n=== DEBUG LISTO ===');
console.log('Usa las funciones anteriores para diagnosticar el problema de redirecci√≥n');
